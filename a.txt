Para configurar o Firebase no seu projeto Flutter, você precisa adicionar os arquivos de configuração do Firebase (google-services.json para Android e GoogleService-Info.plist para iOS) nos diretórios corretos do seu projeto. Aqui está um guia detalhado sobre como fazer isso:

### 1. Criar um Projeto no Firebase Console

1. Vá para o [Firebase Console](https://console.firebase.google.com/).
2. Clique em "Adicionar Projeto".
3. Siga as instruções para criar seu projeto Firebase.

### 2. Adicionar um Aplicativo Android ao Firebase

1. No Firebase Console, selecione seu projeto.
2. Clique no ícone do Android para adicionar um aplicativo Android.
3. Preencha o nome do pacote do Android (o mesmo que está no seu `AndroidManifest.xml`).
4. Clique em "Registrar aplicativo".
5. Baixe o arquivo `google-services.json` fornecido pelo Firebase.
6. Adicione o arquivo `google-services.json` ao diretório `android/app` do seu projeto Flutter.

### 3. Adicionar um Aplicativo iOS ao Firebase

1. No Firebase Console, selecione seu projeto.
2. Clique no ícone do iOS para adicionar um aplicativo iOS.
3. Preencha o ID do pacote do iOS (o mesmo que está no seu `Info.plist`).
4. Clique em "Registrar aplicativo".
5. Baixe o arquivo `GoogleService-Info.plist` fornecido pelo Firebase.
6. Adicione o arquivo `GoogleService-Info.plist` ao diretório `ios/Runner` do seu projeto Flutter.

### 4. Configurar o Firebase no Android

1. No diretório `android/app`, abra o arquivo `build.gradle` (não confunda com o `build.gradle` na raiz do diretório `android`).
2. Adicione a linha `apply plugin: 'com.google.gms.google-services'` ao final do arquivo:

```gradle
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'  // Adicione esta linha
```

3. No diretório `android`, abra o arquivo `build.gradle` na raiz.
4. Adicione a linha `classpath 'com.google.gms:google-services:4.3.10'` no bloco `dependencies`:

```gradle
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.2'
        classpath 'com.google.gms:google-services:4.3.10'  // Adicione esta linha
    }
}
```

### 5. Configurar o Firebase no iOS

1. No diretório `ios`, abra o arquivo `Runner.xcworkspace` no Xcode.
2. No Xcode, clique no projeto Runner na navegação à esquerda, depois clique no ícone `Runner` em "TARGETS".
3. Na aba `Build Settings`, verifique se `Enable Bitcode` está definido como `No`.
4. Adicione o arquivo `GoogleService-Info.plist` ao seu projeto no Xcode:
   - Arraste e solte o arquivo `GoogleService-Info.plist` no diretório `Runner` no Xcode.
   - Certifique-se de marcar a caixa "Copy items if needed" ao adicionar o arquivo.

5. No arquivo `ios/Podfile`, adicione a linha `pod 'Firebase/Core'`:

```ruby
platform :ios, '10.0'

# Adicione esta linha dentro do bloco target
target 'Runner' do
  use_frameworks!
  pod 'Firebase/Core'
end
```

6. Execute o comando `pod install` no diretório `ios`:

```sh
cd ios
pod install
```

### 6. Inicializar o Firebase no Código Flutter

Certifique-se de inicializar o Firebase no seu código Flutter. Atualize o arquivo `lib/main.dart` conforme necessário:

```dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My Service App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LoginScreen(),
    );
  }
}
```

### 7. Executar o Aplicativo

Com todas as configurações feitas, você pode agora executar o aplicativo:

```sh
flutter run
```

Se você tiver alguma dúvida ou encontrar algum problema, me avise!